<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1467301080304">{:repl-history {:ide [], :local [&quot;test-array&quot; &quot;()&quot; &quot;(get test-array 1)&quot; &quot;(conj [] random-letter)&quot; &quot;(conj '() random-letter)&quot; &quot;(test-array)&quot; &quot;(generate-line)&quot; &quot;(generate-line 100)&quot; &quot;(generate-table 30 15)&quot; &quot;(generate-table 5 5)&quot; &quot;(slurp \&quot;words.txt\&quot;)&quot; &quot;(random-word)&quot; &quot;(random-word 7)&quot; &quot;(reduce (fn [word] (&gt; (count word) 4))\n        (str/split-lines (slurp \&quot;words.txt\&quot;)))&quot; &quot;(random-word 6)&quot; &quot;(random-word 6 8)&quot; &quot;(random-word 8 4)&quot; &quot;(random-word 4 4)&quot; &quot;(empty-table)&quot; &quot;(defn random-direction [] (random-item [inc dec identity]))&quot; &quot;(random-direction)&quot; &quot;((random-direction) 10)&quot; &quot;(count random-word 5 10)&quot; &quot;(count (random-word 5 10))&quot; &quot;(count (empty-table 5 10))&quot; &quot;[1 23 4 ]&quot; &quot;'(1 23 4)&quot; &quot;(map inc [1 2 3])&quot; &quot;(def result [])&quot; &quot;(def result [])\n  &quot; &quot;(conj result (random-letter))&quot; &quot;(def remaining 10)\n  &quot; &quot;(dec remaining)&quot; &quot;(if (= remaining 0)\n  result\n  (recur (dec remaining) (conj result (random-letter))))&quot; &quot;(if (= remaining 0)\n  result\n  (dec remaining) \n  (conj result (random-letter)))&quot; &quot;(if (= remaining 0)\n  result\n  (do\n    (dec remaining) \n    (conj result (random-letter))))&quot; &quot;(filter (fn [word] (and (&gt;= (count word) min-length)\n                        (&lt;= (count word) max-length))\n          (str/split-lines (slurp \&quot;words.txt\&quot;))))&quot; &quot;(filter (fn [word] (and (&gt;= (count word) 4)\n                        (&lt;= (count word) 10))\n          (str/split-lines (slurp \&quot;words.txt\&quot;))))&quot; &quot;(random-letter)&quot; &quot;(random-letter)\n  &quot; &quot;(first words)&quot; &quot;(random-word 5 10)\n             &quot; &quot;(empty-table 10 10)&quot; &quot;(generate-line 10)&quot; &quot;(def table empty-table)&quot; &quot;(get-in table 0)\n        &quot; &quot;(get-in table [0])\n        &quot; &quot;(get-in table [1])\n        &quot; &quot;(def table (empty-table))&quot; &quot;(get table 0)&quot; &quot;(get table 1)\n     &quot; &quot;(get-in table 1)\n     &quot; &quot;(empty-table 10 10)\n             &quot; &quot;(def table (empty-table 10 10))&quot; &quot;(get table 10)\n     &quot; &quot;(get table 0)\n     \n     &quot; &quot;(get-in table [0 0])\n     \n     &quot; &quot;(range 10)&quot; &quot;(into [] (char (range 10)))&quot; &quot;(into [] (map char (range 10)))&quot; &quot;(generate-table)&quot; &quot;(generate-table 10 10)&quot; &quot;(def tabl (generate-table 10 10))&quot; &quot;(def table (generate-table 10 10))&quot; &quot;table&quot; &quot;(extract-horizontal table 0 0 4)&quot; &quot;(extract-horizontal table 1 1 4)&quot; &quot;(extract-horizontal table 1 1 1)&quot;], :remote []}}</component>
</project>